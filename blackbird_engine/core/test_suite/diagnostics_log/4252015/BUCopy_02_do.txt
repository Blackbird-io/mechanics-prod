current build: c:\blackbird\engine\wip 

running BUCopy_02.do()


Running BUCopy_02

Test evaluates whether copy methods properly follow tag rules.

Task loads a simple standard model with a developed top business unit. Task
then tags one of the line items in a ground-level component as hard-coded.
Task also tags a driver in the same component as "do not touch".

Task then proceeds to make several copies of the top business unit.

Grader checks that hard-coded tag travelled out but the dnt tag did not. 

#T14.01: Load model and tag catalog, get necessary tag objects.
{'T14.01': {}}
Tests\Basic\BUCopy_02\source_model.pkl
<_io.BufferedReader name='Tests\\Basic\\BUCopy_02\\source_model.pkl'>
FormulaManager successfully populated catalog with 12 formulas.
starting model: 
 <DataStructures.Modelling.Model.Model object at 0x000000000289A160>
s_topBU.fillOut() 

top business unit: 
 <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x0000000002A9B710>

from Managers.tag_manager import loaded_tagManager as tag_manager
t_dnt = tag_manager.catalog["dnt"]
t_hard = tag_manager.catalog["hard"]

t_dnt:  do not touch object!
t_hard: hard coded value on object

T14.02: locate component no. 4, tag a line as hard-coded and a driveras dnt.


ordered_bbids = sorted(s_topBU.components.keys())
lab_bbid = ordered_bbids[3]
lab_comp = s_topBU.components[lab_bbid]

lab comp bbid: 
3df236d7-6e74-3a97-bad9-25f1ba1c31a0


l_rent = lab_comp.financials[9]
l_util = lab_comp.financials[10]
l_rent.tag(t_hard)
dr_util = lab_comp.drivers.getDrivers(l_util.name)[0]
dr_util.tag(t_dnt)

lab line: 
    rent.............................................................2000.00    

lab line tags: 
['rent', 'operating expense', '|BB|endRequiredTags', 'fixed expense', 'estimated', 'run-rate', 'cash rent', 'non-straight-line', 'non-gaap', 'hard coded value on object', '|BB|end own optionalTags']

lab driver bbid: 
e133ad17-e720-3b0d-aeec-6cdb4176e9ad


output["T14.02"]["lab_comp_bbid"] = lab_comp.id.bbid
output["T14.02"]["lab_comp"] = lab_comp
output["T14.02"]["lab_dr_bbid"] = dr_util.id.bbid
output["T14.02"]["lab_dr"] = dr_util
output["T14.02"]["lab_line"] = l_rent
output["T14.02"]["t_dnt"] = t_dnt

T14.03: make copies, enforce rules.
c1 = s_topBU.copy(enforce_rules = True)


make a second copy of topBU, set its period to None, copy it again.

c2 = s_topBU.copy(enforce_rules = True)
c2.period = None
cc3 = c2.copy()


output["T14.01"]["topBU"] = s_topBU
output["T14.03"]["c1"] = c1
output["T14.03"]["c2"] = c2
output["T14.03"]["cc3"] = cc3

Successfully completed test.
BUCopy_02 generated the following output: 
	{'T14.03': {'c1': <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x0000000002CEE7F0>, 'cc3': <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x00000000035A3CF8>, 'c2': <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x00000000031F7BE0>}, 'T14.02': {'lab_comp_bbid': UUID('3df236d7-6e74-3a97-bad9-25f1ba1c31a0'), 'lab_dr': <DataStructures.Modelling.Driver.Driver object at 0x0000000002E182E8>, 'lab_dr_bbid': UUID('e133ad17-e720-3b0d-aeec-6cdb4176e9ad'), 't_dnt': 'do not touch object!', 'lab_line': <DataStructures.Modelling.LineItem.LineItem object at 0x0000000002E188D0>, 'lab_comp': <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x0000000002E10DD8>}, 'T14.01': {'topBU': <DataStructures.Modelling.BusinessUnit.BusinessUnit object at 0x0000000002A9B710>}}
start time:  1429985853.570732
end time:    1429985854.398886
run time:    0.8281538486480713
****************************************

RESULT:
	testName:       BUCopy_02 

	output:         ... (truncated) 

	errors:         [] 

	completed:      True 

	passed:         False 

	rubric:         None 


